@model UniversityManagementSystemApp.Models.TeacherCourseAssign

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "teacherCourseAssignForm" })) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>TeacherCourseAssign</h4>
        <hr />
        @Html.ValidationSummary(true)

        <div class="form-group">
            @Html.LabelFor(model => model.DepartmentId, "DepartmentId", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("DepartmentId", "[Select Department]")
                @Html.ValidationMessageFor(model => model.DepartmentId)
                <div id="DepartmentSelectionError">

                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.TeacherId, "TeacherId", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("TeacherId", "[Select Teacher]")
                @Html.ValidationMessageFor(model => model.TeacherId)
                <div id="TeacherSelectionError">

                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="CretidToBeTaken" class="col-sm-2 control-label">Cretid to be taken</label>
            <div class="col-sm-10">
                <input type="text" readonly class="form-control" id="CretidToBeTaken">
            </div>
        </div>
        <div class="form-group">
            <label for="RemainingCretid" class="col-sm-2 control-label">Remaining cretid</label>
            <div class="col-sm-10">
                <input type="text" readonly class="form-control" id="RemainingCretid">
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CourseId, "CourseId", new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("CourseId", "[Select Course]")
                @Html.ValidationMessageFor(model => model.CourseId)
                <div id="CourseSelectionError">

                </div>
            </div>
        </div>
        <div class="form-group">
            <label for="CourseName" class="col-sm-2 control-label">Course name</label>
            <div class="col-sm-10">
                <input type="text" readonly class="form-control" id="CourseName">
            </div>
        </div>
        <div class="form-group">
            <label for="Credit" class="col-sm-2 control-label">Cretid</label>
            <div class="col-sm-10">
                <input type="text" readonly class="form-control" id="Credit">
            </div>
        </div>
        <input type="hidden" readonly class="form-control" id="hiddenCoursStatus">
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
@*<script src="~/Scripts/jquery.confirm.js"></script>*@
<script>
    $(document).ready(function () {
        //cascede DDL:
        function getTeachers(deptId) {
            var items = "<option value=\"\">" + "[Select Teacher]" + "</option>";
            $.ajax({
                url: "@Url.Action("GetTeacherInfoByDept", "TeacherCourseAssign")",//action, controller
                data: { departmentId: deptId},
            dataType: "json",
            type: "POST",
            error: function() {
                $("#TeacherId").html(items);
                $("#DepartmentSelectionError").show().text("Please select a department.").addClass("btn-danger").fadeOut(4000);
            },
            success: function(data) {
                $.each(data, function(i, item) {
                    items += "<option value=\"" + item.Value + "\">" + item.Text + "</option>";
                });
                $("#TeacherId").html(items);
            }
        });
    }
        $("#DepartmentId").change(function () {
            $("#CretidToBeTaken").val("");
            $("#RemainingCretid").val("");
            var deptId = $("#DepartmentId").val();
            $("#teacherData").empty();
            getTeachers(deptId);
        });
        $("#TeacherId").change(function () {
            $("#CretidToBeTaken").val("");
            $("#RemainingCretid").val("");
                var optionSelected = $(this).find("option:selected");
                var valueSelected = optionSelected.val();
                if (valueSelected) {
                    var json = { teacherId: valueSelected };
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetTeacherInfo", "TeacherCourseAssign")',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(json),
                        dataType: "json",
                        success: function(data) {
                            $("#CretidToBeTaken").val(data.CreditTaken);
                            $("#RemainingCretid").val(data.CreditRemaining);
                        }
                    });
                } else {
                    $("#TeacherSelectionError").show().text("Please select a teacher.").addClass("btn-danger").fadeOut(4000);
                    $("#CretidToBeTaken").val("");
                    $("#RemainingCretid").val("");
                }
            });
            $("#CourseId").change(function () {
                var optionSelected = $(this).find("option:selected");
                var valueSelected = optionSelected.val();
                if (valueSelected) {
                    var json = { courseId: valueSelected };
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetCourseInfo", "TeacherCourseAssign")',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(json),
                        dataType: "json",
                        success: function (data) {
                            $("#CourseName").val(data.Name);
                            $("#Credit").val(data.Credit);
                            $("#hiddenCoursStatus").val(data.CourseStatus);
                        }
                    });
                } else {
                    $("#CourseSelectionError").show().text("Please select a course.").addClass("btn-danger").fadeOut(4000);
                    $("#CourseName").val("");
                    $("#Credit").val("");
                    $("#hiddenCoursStatus").val("");
                }
            });
        $("#teacherCourseAssignForm").submit(function (event) {
            var remainingCredit = parseFloat($("#RemainingCretid").val());
            var selectedCourseCredit = parseFloat($("#Credit").val());
            var courseStatus = $("#hiddenCoursStatus").val();
            if (courseStatus == 1) {
                alert("This course already assigned");
                event.preventDefault();
                return false;
            }
            if (selectedCourseCredit > remainingCredit)
            {
                var c = confirm("Selected course credit greater than teacher's reamaining credit, Click OK to assign the course");
                var d = 5;
            }
            if (c) {
                
            } else if(d) {
                event.preventDefault();
                return false;
            } else {
                
            }
        });
        });
</script>
}
